XList <- lapply(datList$XList, scale, scale=F)
AdjList <- lapply(datList$posList, getAdj_reg,platform='ST')
resList <- iDR.SCv3::idrsc(XList, AdjList = AdjList, K= 5)
resList <- iDR.SCv3::idrsc(XList, AdjList = AdjList, K= 5, q= 15)
lapply(resList[[1]]$cluster, table)
iDR.SCv3::idrsc
resList <- iDR.SCv3::idrsc(XList, AdjList = AdjList, K= 5, q= 15, int.model = NULL)
lapply(resList[[1]]$cluster, table)
library(iDR.SCv3)
### two data source
q <- 10; K <- 4
dat <- gendataInte_sp(width1 = 20, height1 = 20,height2=21, width2=21, p=100,q=q, K=K, sigma2 = 9,
beta=c(0.5, 1.0))
AdjList <- lapply(list(dat$pos1, dat$pos2), getAdj_reg, platform='ST')
AdjList_car <- lapply(list(dat$pos1, dat$pos2), getAdj_manual, radius=5)
resList <- idrsc(list(dat$X1, dat$X2), posList = NULL, AdjList = AdjList, Adjlist_car=AdjList_car,
q=q, K=K, maxIter = 10,
platform='ST',int.model = NULL,
Sigma_equal =T, Sigma_diag=T, error_heter = T, seed = 1, Sp2=T, verbose=T)
str(resList)
resList[[1]]$Sigma
sp_means_Rcpp(AdjList[[1]])
mclust::adjustedRandIndex(unlist(resList[[1]]$cluster), unlist(dat$cluster))
lapply(resList[[1]]$cluster, table)
seuList <- gendata_seulist(height1=20, width1=20, height2=24, width2=25,p=200, K=4, alpha=10)
seuList
head(seuList[[1]])
datList <- iDR.SCv3::getXList(seuList, genelist=row.names(seuList[[1]]))
XList <- lapply(datList$XList, scale, scale=F)
AdjList <- lapply(datList$posList, getAdj_reg,platform='ST')
resList <- iDR.SCv3::idrsc(XList, AdjList = AdjList, K= 5, q= 15, int.model = NULL)
lapply(resList[[1]]$cluster, table)
seuList <- gendata_seulist(height1=20, width1=20, height2=24, width2=25,p=200, K=4, alpha=10,     sigma2=0.1)
seuList
head(seuList[[1]])
datList <- iDR.SCv3::getXList(seuList, genelist=row.names(seuList[[1]]))
XList <- lapply(datList$XList, scale, scale=F)
AdjList <- lapply(datList$posList, getAdj_reg,platform='ST')
resList <- iDR.SCv3::idrsc(XList, AdjList = AdjList, K= 5, q= 15, int.model = NULL)
lapply(resList[[1]]$cluster, table)
seuList <- gendata_seulist(height1=20, width1=20, height2=24, width2=25,p=200, K=4, alpha=20,     sigma2=0.1)
seuList
head(seuList[[1]])
datList <- iDR.SCv3::getXList(seuList, genelist=row.names(seuList[[1]]))
XList <- lapply(datList$XList, scale, scale=F)
AdjList <- lapply(datList$posList, getAdj_reg,platform='ST')
resList <- iDR.SCv3::idrsc(XList, AdjList = AdjList, K= 5, q= 15, int.model = NULL)
lapply(resList[[1]]$cluster, table)
seuList <- gendata_seulist(height1=20, width1=20, height2=24, width2=25,p=200, K=4, alpha=20,     sigma2=0.1)
seuList <- gendata_seulist(height1=20, width1=20, height2=24, width2=25,p=200, K=4, alpha=20,     sigma2=0.1)
seuList
seuList
head(seuList[[1]])
## Create
PRECASTObj <-  CreatePRECASTObject(seuList)
## check the number of genes/features after filtering step
PRECASTObj@seulist
## Add adjacency matrix list for a PRECASTObj object to prepare for PRECAST model fitting.
PRECASTObj <-  AddAdjList(PRECASTObj, platform = "ST")
## Add a model setting in advance for a PRECASTObj object. verbose =TRUE helps outputing the information in the algorithm.
PRECASTObj <- AddParSetting(PRECASTObj, Sigma_equal=TRUE, verbose=TRUE, seed=2022)
### Given K
PRECASTObj <- PRECAST(PRECASTObj, K=5)
## backup the fitting results in resList
resList <- PRECASTObj@resList
# PRECASTObj@resList <- resList
PRECASTObj <- selectModel(PRECASTObj)
selectModel
detach(package:iDR.SCv3)
# PRECASTObj@resList <- resList
PRECASTObj <- selectModel(PRECASTObj)
true_cluster <- lapply(seuList, function(x) x$true_cluster)
str(true_cluster)
mclust::adjustedRandIndex(unlist(PRECASTObj@resList$cluster), unlist(true_cluster))
seuInt <- IntegrateSpaData(PRECASTObj, species='unknown')
seuInt
p12 <- SpaPlot(seuInt, batch=NULL,point_size=2, combine=TRUE)
p12
seuInt <- AddUMAP(seuInt)
SpaPlot(seuInt, batch=NULL,item='RGB_UMAP',point_size=2, combine=TRUE, text_size=15)
seuInt <- AddTSNE(seuInt, n_comp = 2)
library(patchwork)
cols_cluster <- c("#E04D50", "#4374A5", "#F08A21","#2AB673", "#FCDDDE",  "#70B5B0", "#DFE0EE" ,"#D0B14C")
p1 <- dimPlot(seuInt,  font_family='serif', cols=cols_cluster) # Times New Roman
p2 <- dimPlot(seuInt, item='batch', point_size = 1,  font_family='serif')
p1 + p2
dimPlot(seuInt, reduction = 'UMAP3', item='cluster', cols=cols_cluster, font_family='serif')
DimPlot(seuInt, reduction = 'position')
DimPlot(seuInt, reduction = 'tSNE')
DimPlot(seuInt, reduction = 'PRECAST')
dat_deg <- FindAllMarkers(seuInt)
dat_deg <- FindAllMarkers(seuInt)
library(dplyr)
n <- 10
dat_deg %>%
group_by(cluster) %>%
top_n(n = n, wt = avg_log2FC) -> top10
seuInt <- ScaleData(seuInt)
seus <- subset(seuInt, downsample = 400)
color_id <- as.numeric(levels(Idents(seus)))
## HeatMap
p1 <- doHeatmap(seus, features = top10$gene, cell_label= "Domain",
grp_label = F, grp_color = cols_cluster,
pt_size=6,slot = 'scale.data') +
theme(legend.text = element_text(size=16),
legend.title = element_text(size=18, face='bold'),
axis.text.y = element_text(size=7, face= "italic", family='serif'))
p1
dir.file <- "E:\\Research paper\\iDR-SC\\Human_Breast_Cancer\\BlockA_Section"
seuList <- list()
seuList <- list()
for(r in 1:2){
message("r = ", r)
seuList[[r]] <- DR.SC::read10XVisium(paste0(dir.file, r))
}
library(Seurat)
seuList
?DR.SC::read10XVisium
## Create
library(PRECAST)
PRECASTObj <-  CreatePRECASTObject(seuList)
human_breast_cancer2 <- PRECASTObj
save(human_breast_cancer2, file= paste0(dir.file, 1, "\\human_breast_cancer2_PRECASTObj.rds"))
## check the number of genes/features after filtering step
PRECASTObj@seulist
## Add adjacency matrix list for a PRECASTObj object to prepare for PRECAST model fitting.
PRECASTObj <-  AddAdjList(PRECASTObj, platform = "Visium")
rm(seuList)
## Add a model setting in advance for a PRECASTObj object. verbose =TRUE helps outputing the information in the algorithm.
PRECASTObj <- AddParSetting(PRECASTObj, Sigma_equal=FALSE, verbose=TRUE, maxIter=30, int.model=NULL)
### Given K
PRECASTObj <- PRECAST(PRECASTObj, K=14)
mat <- matrix(runif(100*3, 0.6, 1), 100, 3)
colnames(mat) <- paste0("Method", 1:3)
boxPlot(mat)
## backup the fitting results in resList
resList <- PRECASTObj@resList
PRECASTObj <- selectModel(PRECASTObj)
seuInt <- IntegrateSpaData(PRECASTObj, species='Human')
seuInt
SpaPlot(seuInt, batch=1:2,point_size=1,cols = cols_cluster12, combine=TRUE)
SpaPlot(seuInt, batch=1:2,point_size=1, combine=TRUE)
p12 <- SpaPlot(seuInt, batch=NULL,point_size=1, combine=TRUE)
p12
cols <-  c( "#FD7446" ,"#709AE1", "#31A354","#9EDAE5",
"#DE9ED6" ,"#BCBD22", "#CE6DBD" ,"#DADAEB" ,
"yellow", "#FF9896","#91D1C2", "#C7E9C0" ,"#6B6ECF", "#7B4173" )
p12 <- SpaPlot(seuInt, batch=NULL,point_size=1, cols=cols, combine=TRUE)
p12 <- SpaPlot(seuInt, batch=NULL,point_size=1, cols=cols, combine=TRUE)
p12
seuInt <- AddUMAP(seuInt)
SpaPlot(seuInt, batch=NULL,item='RGB_UMAP',point_size=2, combine=TRUE, text_size=15)
seuInt <- AddTSNE(seuInt, n_comp = 2)
library(patchwork)
p1 <- dimPlot(seuInt, point_size = 0.1, font_family='serif', cols=cols_cluster) # Times New Roman
cols_cluster <-  c( "#FD7446" ,"#709AE1", "#31A354","#9EDAE5",
"#DE9ED6" ,"#BCBD22", "#CE6DBD" ,"#DADAEB" ,
"yellow", "#FF9896","#91D1C2", "#C7E9C0" ,"#6B6ECF", "#7B4173" )
p1 <- dimPlot(seuInt, point_size = 0.1, font_family='serif', cols=cols_cluster) # Times New Roman
p2 <- dimPlot(seuInt, item='batch', point_size = 0.1,  font_family='serif')
p1 + p2
p1 <- dimPlot(seuInt, point_size = 0.5, font_family='serif', cols=cols_cluster) # Times New Roman
p2 <- dimPlot(seuInt, item='batch', point_size = 0.5,  font_family='serif')
p1 + p2
dat_deg <- FindAllMarkers(seuInt)
dat_deg <- FindAllMarkers(seuInt)
library(dplyr)
library(dplyr)
n <- 10
dat_deg %>%
group_by(cluster) %>%
top_n(n = n, wt = avg_log2FC) -> top10
seuInt <- ScaleData(seuInt)
seuInt <- ScaleData(seuInt)
seus <- subset(seuInt, downsample = 400)
color_id <- as.numeric(levels(Idents(seus)))
## HeatMap
p1 <- doHeatmap(seus, features = top10$gene, cell_label= "Domain",
grp_label = F, grp_color = cols_cluster,
pt_size=6,slot = 'scale.data') +
theme(legend.text = element_text(size=16),
legend.title = element_text(size=18, face='bold'),
axis.text.y = element_text(size=7, face= "italic", family='serif'))
## HeatMap
p1 <- doHeatmap(seus, features = top10$gene, cell_label= "Domain",
grp_label = F, grp_color = cols_cluster,
pt_size=6,slot = 'scale.data') +
theme(legend.text = element_text(size=16),
legend.title = element_text(size=18, face='bold'),
axis.text.y = element_text(size=7, face= "italic", family='serif'))
p1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 10cm,
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 10,
fig.height=10
)
p1
p1 <- dimPlot(seuInt, item='cluster', point_size = 0.5, font_family='serif', cols=cols_cluster) # Times New Roman
p2 <- dimPlot(seuInt, item='batch', point_size = 0.5,  font_family='serif')
p1 + p2
getwd()
save(seuInt, file= paste0(dir.file, 1, "\\human_breast_cancer2_seuInt.rds"))
save(seuInt, file= paste0(dir.file, 1, "\\human_breast_cancer2_seuInt.rds"))
save(dat_deg, file= paste0(dir.file, 1, "\\human_breast_cancer2_DEGs.rds"))
color_id <- as.numeric(levels(Idents(seus)))
## HeatMap
p1 <- doHeatmap(seus, features = top10$gene, cell_label= "Domain",
grp_label = F, grp_color = cols_cluster[color_id],
pt_size=6,slot = 'scale.data') +
theme(legend.text = element_text(size=16),
legend.title = element_text(size=18, face='bold'),
axis.text.y = element_text(size=7, face= "italic", family='serif'))
p1
color_id <- as.numeric(levels(Idents(seus)))
## HeatMap
p1 <- doHeatmap(seus, features = top10$gene, cell_label= "Domain",
grp_label = F, grp_color = cols_cluster[color_id],
pt_size=6,slot = 'scale.data') +
theme(legend.text = element_text(size=16),
legend.title = element_text(size=18, face='bold'),
axis.text.y = element_text(size=7, face= "italic", family='serif'))
p1
?DoHeatmap
data(PRECASTObj)
PRECASTObj <- selectModel(PRECASTObj)
seuInt <- IntegrateSpaData(PRECASTObj, species='unknown')
doHeatmap(seuInt)
doHeatmap(seuInt, features=row.names(seuInt)[1:5])
seuInt <- scaleData(seuInt)
doHeatmap(seuInt, features=row.names(seuInt)[1:5])
seuInt <- ScaleData(seuInt)
doHeatmap(seuInt, features=row.names(seuInt)[1:5])
PRECASTObj
featurePlot <- function(seu, feature=NULL, cols=NULL, pt_size=1, title_size, quant=0.5){
dat <- as.data.frame(seu[["Spatial"]]@cell.embeddings)
if(is.null(feature)) feature <- row.names(seu)[1]
dat$Expression <- seu[['RNA']]@scale.data[feature,]
if(is.null(cols)) cols <- c("#0571B0",  "#CA0020")
med <- quantile(seu[['RNA']]@scale.data[feature,], quant)
ggplot(data=dat, aes(x=Spatial_1, y=Spatial_2, color=Expression)) + geom_point(size=pt_size) +
scale_colour_gradient2(
low = cols[1],
mid = "white",
high = cols[2], midpoint = med) + mytheme_graybox() +
ggtitle(feature) + theme(title =element_text(size=title_size, color=1, face='italic'), legend.position = 'none')
}
featurePlot(seuInt)
head(seuInt)
seuInt
reduction="position"
dat <- as.data.frame(seu[[reduction]]@cell.embeddings)
dat <- as.data.frame(seuInt[[reduction]]@cell.embeddings)
head(dat)
featurePlot <- function(seu, feature=NULL, cols=NULL, pt_size=1, title_size=16,
quant=0.5, assay='RNA', reduction="position"){
dat <- as.data.frame(seu[[reduction]]@cell.embeddings)
colnames(dat) <- c("Spatial_1", "Spatial_2")
if(is.null(feature)) feature <- row.names(seu)[1]
dat$Expression <- seu[[assay]]@scale.data[feature,]
if(is.null(cols)) cols <- c("#0571B0",  "#CA0020")
med <- quantile(seu[[assay]]@scale.data[feature,], quant)
ggplot(data=dat, aes(x=Spatial_1, y=Spatial_2, color=Expression)) + geom_point(size=pt_size) +
scale_colour_gradient2(
low = cols[1],
mid = "white",
high = cols[2], midpoint = med) + mytheme_graybox() +
ggtitle(feature) + theme(title =element_text(size=title_size, color=1, face='italic'))
}
featurePlot(seuInt)
seuInt
rm(list=ls())
library(PRECAST)
data(PRECASTObj)
PRECASTObj <- selectModel.PRECASTObj(PRECASTObj)
seuInt <- IntegrateSpaData(PRECASTObj, species='unknown')
PRECASTObj <- selectModel(PRECASTObj)
seuInt <- IntegrateSpaData(PRECASTObj, species='unknown')
PRECASTObj
seuInt <- IntegrateSpaData(PRECASTObj, species='unknown')
Add_embed
species= "unknown"
suppressMessages(require(Matrix))
suppressMessages(require(Seurat))
if(is.null(PRECASTObj@seulist)) stop("The slot seulist in PRECASTObj is NULL!")
XList <- lapply(PRECASTObj@seulist, function(x) Matrix::t(x[["RNA"]]@data))
n_r <- length(XList)
for(r in 1:n_r){
colnames(XList[[r]]) <- firstup(colnames(XList[[r]]))
}
barcodes_all <- lapply(XList, row.names)
if(any(duplicated(unlist(barcodes_all)))){
for(r in 1:n_r){
row.names(XList[[r]]) <- paste0(row.names(XList[[r]]), r)
}
}
genelist <- colnames(XList[[1]])
lower_species <- tolower(species)
houseKeep <- switch (lower_species,
human = {
data(Human_HK_genes)
intersect((genelist), Mouse_HK_genes$Gene)
},
mouse={
data(Mouse_HK_genes)
intersect((genelist), Mouse_HK_genes$Gene)
},
unkown={
character()
}
)
houseKeep <- c(houseKeep, custom_housekeep)
if(length(houseKeep) < 5){
hX <- get_correct_mean_exp(XList,PRECASTObj@resList$hV, PRECASTObj@resList$hW)
}else{
hX <- get_correct_exp(XList, PRECASTObj@resList$Rf, houseKeep, q_unwanted=min(10, length(houseKeep)))
}
get_correct_exp <- function(XList, RfList, housekeep, q_unwanted=10){
if(!all(sapply(XList, is.matrix))){
XList <- lapply(XList, as.matrix)
}
MList <- pbapply::pblapply(XList, function(x) wpca(x[,housekeep], q=q_unwanted, F)$PCs)
M0 <- matlist2mat(MList)
rm(MList)
Rf <- matlist2mat(RfList)
rm(RfList)
XList <-  lapply(XList, scale, scale=FALSE)
X0 <- matlist2mat(XList)
rm(XList)
lm1 <- lm(X0~ 0+ cbind(Rf, M0))
hK <- ncol(Rf)
coefmat <- coef(lm1)[-c(1:hK),]
rm(lm1)
hX <- X0 - M0 %*% coefmat
return(hX)
}
get_correct_mean_exp <- function(XList,  hVList, hW){
XList <- lapply(XList, scale, scale=FALSE)
r_max <- length(XList)
X0 <- XList[[1]]
hV0 <- hVList[[1]]
if(r_max>1){
for(r in 2:r_max){
X0 <- rbind(X0, XList[[r]])
hV0 <- rbind(hV0, hVList[[r]])
}
}
X0 - hV0%*% base::t(hW)
}
houseKeep <- c(houseKeep, custom_housekeep)
if(length(houseKeep) < 5){
hX <- get_correct_mean_exp(XList,PRECASTObj@resList$hV, PRECASTObj@resList$hW)
}else{
hX <- get_correct_exp(XList, PRECASTObj@resList$Rf, houseKeep, q_unwanted=min(10, length(houseKeep)))
}
meta_data <- data.frame(batch=factor(get_sampleID(XList)), cluster= factor(unlist(PRECASTObj@resList$cluster)))
row.names(meta_data) <- row.names(hX)
get_sampleID <- PRECAST:::get_sampleID
meta_data <- data.frame(batch=factor(get_sampleID(XList)), cluster= factor(unlist(PRECASTObj@resList$cluster)))
row.names(meta_data) <- row.names(hX)
count <- sparseMatrix(i=1,j=1, x=0, dims=dim(t(hX)))
row.names(count) <- colnames(hX)
colnames(count) <- row.names(hX)
seuInt <- CreateSeuratObject(counts = count, assay = 'PRECAST', meta.data=meta_data)
seuInt[['PRECAST']]@data <- t(hX)
rm(XList)
seuInt
# seuInt <- CreateSeuratObject(assay, meta.data=meta_data, assay = 'PRECAST')
seuInt <- Add_embed(matlist2mat(PRECASTObj@resList$hZ), seuInt, embed_name = 'PRECAST', assay='PRECAST')
matlist2mat <- PRECAST:::matlist2mat
# seuInt <- CreateSeuratObject(assay, meta.data=meta_data, assay = 'PRECAST')
seuInt <- Add_embed(matlist2mat(PRECASTObj@resList$hZ), seuInt, embed_name = 'PRECAST', assay='PRECAST')
seuInt
seuInt <- CreateSeuratObject(counts = count, assay = 'PRECAST', meta.data=meta_data)
seuInt[['PRECAST']]@data <- t(hX)
seuInt
# seuInt <- CreateSeuratObject(assay, meta.data=meta_data, assay = 'PRECAST')
seuInt <- Add_embed(matlist2mat(PRECASTObj@resList$hZ), seuInt, embed_name = 'PRECAST')
seuInt
seuInt <- CreateSeuratObject(counts = count, assay = 'PRE_CAST', meta.data=meta_data)
seuInt[['PRE_CAST']]@data <- t(hX)
# seuInt <- CreateSeuratObject(assay, meta.data=meta_data, assay = 'PRECAST')
seuInt <- Add_embed(matlist2mat(PRECASTObj@resList$hZ), seuInt, embed_name = 'PRE_CAST', assay='PRECAST')
seuInt
seuInt <- CreateSeuratObject(counts = count, assay = 'PRE_CAST', meta.data=meta_data)
seuInt[['PRE_CAST']]@data <- t(hX)
# seuInt <- CreateSeuratObject(assay, meta.data=meta_data, assay = 'PRECAST')
seuInt <- Add_embed(matlist2mat(PRECASTObj@resList$hZ), seuInt, embed_name = 'PRECAST', assay='PRE_CAST')
seuInt
posList <- lapply(PRECASTObj@seulist, function(x) cbind(x$row, x$col))
seuInt <- Add_embed(matlist2mat(posList), seuInt, embed_name = 'position', assay='PRE_CAST')
Idents(seuInt) <- factor(meta_data$cluster)
seuInt
rm(list=ls())
library(PRECAST)
data(PRECASTObj)
PRECASTObj <- selectModel(PRECASTObj)
seuInt <- IntegrateSpaData(PRECASTObj, species='unknown')
featurePlot(seuInt)
featurePlot
featurePlot(seuInt, assay='PRE_CAST')
seuInt <- ScaleData(seuInt)
featurePlot(seuInt, assay='PRE_CAST')
library(ggplot2)
featurePlot(seuInt, assay='PRE_CAST')
doHeatmap(seuInt, features=row.names(seuInt)[1:5])
embed_use <- cbind(1:100, sin((1:100)*pi/2))
meta_data <- data.frame(cluster=factor(rep(1:2, each=50)))
plot_scatter(embed_use, meta_data, label_name='cluster')
?Seurat::RidgePlot
ridgePlot(seuInt, features=row.names(seuInt)[1:4])
ridgePlot(seuInt, features=row.names(seuInt)[1:4], ncol=2)
data(PRECASTObj)
PRECASTObj <- selectModel(PRECASTObj)
SpaPlot(seuInt)
mat <- matrix(runif(100*3, 0.6, 1), 100, 3)
colnames(mat) <- paste0("Method", 1:3)
volinPlot(mat)
?selectModel.PRECASTObj
rm(list=ls())
library(PRECAST)
library(PRECAST)
?ICM.EM_structure
q <- 10; K <- 4
dat <- PRECAST:::gendataInte_sp(width1 = 20, height1 = 20,height2=21, width2=21, p=100,q=q, K=K, sigma2 = 9,
beta=c(0.5, 1.0))
AdjList <- lapply(list(dat$pos1, dat$pos2), getAdj_reg, platform='ST')
message(sapply(AdjList, dim))
resList <- ICM.EM_structure(list(dat$X1, dat$X2), posList = NULL, AdjList = AdjList,
q=q, K=K, verbose=T)
?model_set
resList <- ICM.EM_structure(list(dat$X1, dat$X2),  AdjList = AdjList,
q=q, K=K)
?Add_embed
?AddAdjList
getAdj_fixedNumber
get_fixedNumber_neighbors
?getAdj_reg
?AddParSetting
example("AddParSetting")
rm(list=ls())
?boxPlot
example("boxPlot")
?coord_cartesian
coordinate_rotate
?coordinate_rotate
example("coordinate_rotate")
?coordinate_rotate
?CreatePRECASTObject
example("CreatePRECASTObject")
?dimPlot
example("dimPlot")
?doHeatmap
example("doHeatmap")
?featurePlot
data(PRECASTObj)
PRECASTObj <- selectModel(PRECASTObj)
seuInt <- IntegrateSpaData(PRECASTObj, species='unknown')
seuInt <- ScaleData(seuInt)
featurePlot(seuInt, assay='PRE_CAST')
?firstup
example("firstup")
?gendata_seulist
example("gendata_seulist")
?Human_HK_genes
?ICM.EM_structure
?ICM.EM
?IntegrateData
?IntegrateSpaData
example("IntegrateSpaData")
?Mouse_HK_genes
?plot_RGB
?plot_scatter
example("plot_scatter")
plot_scatter(embed_use, meta_data, label_name='cluster', do_density = T)
?PRECAST
?`PRECASTObj-class`
?ridgePlot
example("ridgePlot")
data(PRECASTObj)
PRECASTObj <- selectModel(PRECASTObj)
seuInt <- IntegrateSpaData(PRECASTObj, species='unknown')
ridgePlot(seuInt, features=row.names(seuInt)[1:4], ncol=2)
?selectIntFeatures
?selectModel
example("selectModel")
?SpaPlot
example("SpaPlot")
?volinPlot
example("volinPlot")
rm(list=ls())
library(PRECAST)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
warnings()
pkgdown::build_site()
## Create
dir.file <- "E:\\Research paper\\iDR-SC\\Human_Breast_Cancer\\BlockA_Section1\\"
load(paste0(dir.file, "human_breast_cancer2_PRECASTObj.rds"))
## Create
dir.file <- "E:\\Research paper\\IntegrateDRcluster\\iDR-SC\\Human_Breast_Cancer\\BlockA_Section1\\"
load(paste0(dir.file, "human_breast_cancer2_PRECASTObj.rds"))
rm(list=ls())
pkgdown::build_site()
AddUMAP
library(PRECAST)
pkgdown::build_site()
